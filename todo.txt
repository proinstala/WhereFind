+ Crear head y foot para contener todo el head del html y la parte final del body
+ Tanto head como food admitan parámetros para poder decidir que cargar
+ Añadir al head un parámetro para poder cambiar el title del sitio
+ Crear clase UserDto
+ Crear interface para poder gestionar las peticiones de acceso a datos
+ Crear Gestor Persistencia para acceder, guardar los datos de la app
+ Crear base de datos WhereFindData
+ Crear tabla Users
+ Crear en la tabla Users varios usuarios
+ Crear archivo sql con todas las sentencias necesarias para la gestion de usuarios
+ Crear Clase de persistencia basada en mysql
+ Poder hacer login
+ Que recuerde (SESSION) al usuario logueado
+ Poder hacer logout
+ Separar login de index.jsp
+ Renombrar la clase UserDto.java a UserDTO.java
+ Renombrar el paquete de dto a minúsculas
+ Métodos de UserSession poner primer caracter en minúsculas
+ Usar anotaciones para crear las clases DTO
+ Que el index.jsp muestre el contenido de inicio.jsp
+ La Clase de persistencia basada en mysql que no cierre conexiones y pueda reutilizarlas
+ Poder hacer login con datos de mysql
+ Al fallar un login que lo avise en pantalla
+ Diseñar el cuadro que muestra los errores
+ Al devolver el user en el login que no devuelva el password
+ Renombar los nombres de los métodos de IUserService (usersAdd, usersUpdate, usersDelete, usersGetUserById, usersGetUser, usersGetAll)
+ Crear método en IdentidadService para gestionar los errores, solo pasando un string con el errores
+ Crear método en BaseService para gestionar json
+ Eliminar las string hardcodeadas de IdentidadService referente a los mensaje de las acciones
+ Eliminar las string hardcodeadas de IdentidadService referente a los parametros de las requests
+ Al registrar un usuario que el nombre sea insensible a mayúsculas y minúsculas
+ Al hacer logout y volver atras muestra la parte que solo se debe mostrar estando logeado
+ http://localhost:8080/WhereFind/js/principal.js net::ERR_ABORTED 404 (Not Found)
+ Bloquear el acceso a partes de la api no definidas o que requieren otro tipo de entrada
+ Poder registrar usuarios
+ Poder registrar usuarios - Validar email
+ Bloquear la UI al enviar datos a la api mientras se espera la respuesta
+ En la alerta de bienvenida muestre el nombre real del usuario
+ Que muestre la info del usuario en la barra superior
+ Al crear un nuevo usuario que lo redirija a index.jsp
+ Crear javadoc
+ Securizar api para tener que estar logueado
+ Securizar api para tener que estar logueado como admin
- Revisar como poder mejorar la clase persistencia, que use el patrón singlenton
- Poder recuperar la contraseña de los usuarios
- Poder gestionar los usuarios con un usuario Admin
- Que el servidor notifique que la base de datos no es accesible en vez de producir una excepción
+ Poder bloquear la UI en las peticiones http GET
- Poder bloquear la UI en las peticiones http POST
- Poder bloquear la UI en las peticiones http PUT
+ Limpiar comunes.js de métodos POST no usados
- Añadir a comunes.js en el método POST un callback
- Al obtener/actualizar un usuario, que solo lo pueda solicitar/modificar el mismo o un admin
+ Hacer que toda la cuenta se carge usando rutas virtuales en vez de sus rutas reales. ej : http://localhost:8080/WhereFind/App/web/admin/users.jsp ---> http://localhost:8080/WhereFind/admin/users