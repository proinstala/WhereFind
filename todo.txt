+ Crear head y foot para contener todo el head del html y la parte final del body
+ Tanto head como food admitan parámetros para poder decidir que cargar
+ Añadir al head un parámetro para poder cambiar el title del sitio
+ Crear clase UserDto
+ Crear interface para poder gestionar las peticiones de acceso a datos
+ Crear Gestor Persistencia para acceder, guardar los datos de la app
+ Crear base de datos WhereFindData
+ Crear tabla Users
+ Crear en la tabla Users varios usuarios
+ Crear archivo sql con todas las sentencias necesarias para la gestion de usuarios
+ Crear Clase de persistencia basada en mysql
+ Poder hacer login
+ Que recuerde (SESSION) al usuario logueado
+ Poder hacer logout
+ Separar login de index.jsp
+ Renombrar la clase UserDto.java a UserDTO.java
+ Renombrar el paquete de dto a minúsculas
+ Métodos de UserSession poner primer caracter en minúsculas
+ Usar anotaciones para crear las clases DTO
+ Que el index.jsp muestre el contenido de inicio.jsp
+ La Clase de persistencia basada en mysql que no cierre conexiones y pueda reutilizarlas
+ Poder hacer login con datos de mysql
+ Al fallar un login que lo avise en pantalla
- Revisar como poder mejorar la clase persistencia, que use el patrón singlenton
- Al registrar un usuario que el nombre sea insensible a mayúsculas y minúsculas
- Poder registrar usuarios
- Poder recuperar la contraseña de los usuarios
- Poder gestionar los usuarios con un usuario Admin
- Al hacer logout y volver atras muestra la parte que solo se debe mostrar estando logeado
- http://localhost:8080/WhereFind/js/principal.js net::ERR_ABORTED 404 (Not Found)
+ Diseñar el cuadro que muestra los errores
- Securizar api para tener que estar logueado
- Securizar api para tener que estar logueado como admin
- Bloquear el acceso a partes de la api no definidas o que requieren otro tipo de entrada
+ Al devolver el user en el login que no devuelva el password
+ Renombar los nombres de los métodos de IUserService (usersAdd, usersUpdate, usersDelete, usersGetUserById, usersGetUser, usersGetAll)
- Crear método en IdentidadService para gestionar los errores, solo pasando un string con el errores
- Crear método en BaseService para gestionar json